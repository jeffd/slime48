SLIME for Scheme48 1.3

This directory contains the source files that implement a Scheme48 back
end for the Superior Lisp Interaction Mode for Emacs.  Refer to
<http://common-lisp.net/project/slime/> for more details on SLIME in
general.

This code, and the documentation in this file, is written by Taylor
Campbell and placed in the Public Domain.  All warranties are
disclaimed.

To start up the back end listening on a port, run this from Scheme48's
command processor:

  ,translate =slime48/ ~/path/to/slime48/
  ,exec ,load =slime48/load.scm
  ,exec (slime48-start)

There will be some warnings signalled, because not all of the back end
is implemented, and then you will see a message to the effect that a
server is starting on a certain port.

*Warning*: THIS IS NOT SECURE!  ANYONE MAY CONNECT TO THE SWANK SERVER
ON THE PORT AND DO ARBITRARY THINGS IN YOUR SCHEME48 SYSTEM!  DO NOT
RUN THIS ON AN INSECURE NETWORK!

On the Emacs side, put this into your initialization file:

  (eval-after-load "slime" '(load "/path/to/slime48/slime48"))

Note that this names the _file_ `slime48' in whatever directory the
SLIME48 source resides in.  This file will have a default extension of
`.el' or `.elc'.  The `slime48.el' file include in this directory
initializes SLIME to work with SLIME48 and provides several Scheme48-
specific conveniences: `slime48-toggle-presentations' (along with
`enable' and `disable' operations) toggles whether SLIME48 supports
clickable presentation output, which is off by default; the ,IN and
,IN-PACKAGE commands are like ,!P and ,CHANGE-PACKAGE, but tailored for
seasoned Scheme48 users in whose hands are ingrained ,IN; the ,SCRATCH
and ,CONFIG commands work similarly; and ,USE and ,USE-PACKAGE open
packages in the interaction environment, like the Scheme48 command
processor's ,OPEN command.

On the Scheme48 side, as you work with SLIME, you will see a massive
flow of messages about Swank's operation.  There is no way to disable
this, sorry; this will change when a logging facility beyond (FORMAT
(CURRENT-NOISE-PORT) "~&[Swank: ~?]" MSG ARGS) is implemented.  You
are still, however, at the Scheme48 command processor, even if the
prompt gets hidden by the barrage of noise log messages.

You can connect to a running Scheme48 Swank server arbitrarily many
times to enter arbitrarily many sessions.  SLIME's ,QUIT command only
terminates the current session.  To terminate the whole server, enter
this at the Scheme48 command processor:

  ,in slime48 (close-swank-tcp-server slime48-tcp-server)

(The SLIME48 structure is defined by the load script to define and to
export SLIME48-WORLD as an object describing the SLIME48 world and
SLIME48-TCP-SERVER as an object describing the running Swank TCP
server.)

If, while working with SLIME, you end up trying to use an unimplemented
feature (of which there are many), and you are thrown into SLDB because
of that, just hit `a' to abort the request sent by Emacs to call the
unimplemented feature.

SLIME48 implements its own restart system, which I hope to see in the
official Scheme48 at some point.  It is a very simple system, but it
lacks much integration, which will be added in later versions of
SLIME48.  Typically, you will see only ABORT restarts for aborting
SLIME requests; RESET restarts for returning to an SLDB level and
killing all threads there; and RESUME restarts for returning to an SLDB
level, killing the thread that caused another level to be pushed, and
resuming the operation of all other threads on that level.  (The latter
two correspond with Scheme48's ,RESET and ,RESUME commands.)

Also, references to undefined variables are now restartable.  You get
three restarters: one to simply substitute a value in the place of the
reference, one to define the variable to a given value and use that
value, and one to substitute a different variable altogether for that
reference and use its value.

Note that SLIME48 presents restarts in the opposite order from the CL
SLIME back ends.  I consider this presentation more useful: the SLDB
window centres on the top of the backtrace and bottom of the restart
list, so logically one should see the restarts most relevant to the
error there.  Also, the lowest numbers are at the top of the list, so,
with the order of presentation in SLIME48, 0 will always reset the top
level & 1 will always resume the top level; you don't need to look for
the number to select those restarts: you can just remember those two
useful ones.
